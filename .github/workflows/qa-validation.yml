name: QA Stage Validation

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      template_name:
        description: 'Template name to validate'
        required: true
        type: string
      source_stage:
        description: 'Source stage (development)'
        required: true
        default: 'development'
        type: string

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.12'
  SONAR_VERSION: '4.8.0'

jobs:
  security-scanning:
    name: Comprehensive Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install security tools
        run: |
          pip install bandit safety semgrep
          npm install -g audit-ci
      
      - name: Run SAST (Bandit for Python)
        run: |
          bandit -r . -f json -o reports/bandit-report.json
          echo "‚úÖ Python SAST scan completed"
      
      - name: Run dependency vulnerability scan
        run: |
          safety check --json --output reports/safety-report.json
          npm audit --audit-level high
          echo "‚úÖ Dependency vulnerability scan completed"
      
      - name: Run Semgrep security analysis
        run: |
          semgrep --config=auto --json --output=reports/semgrep-report.json .
          echo "‚úÖ Semgrep security analysis completed"
      
      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
      
      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            reports/bandit-report.json
            reports/safety-report.json
            reports/semgrep-report.json
            report_html.html

  compliance-validation:
    name: Regulatory Compliance Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup compliance validation tools
        run: |
          pip install compliance-checker gdpr-checker hipaa-validator
      
      - name: GDPR Compliance Check
        run: |
          python scripts/gdpr_compliance_check.py \
            --templates qa-templates/ \
            --output reports/gdpr-compliance.json
          echo "‚úÖ GDPR compliance validation completed"
      
      - name: HIPAA Compliance Check
        run: |
          python scripts/hipaa_compliance_check.py \
            --templates qa-templates/ \
            --output reports/hipaa-compliance.json
          echo "‚úÖ HIPAA compliance validation completed"
      
      - name: SOC2 Compliance Check
        run: |
          python scripts/soc2_compliance_check.py \
            --templates qa-templates/ \
            --output reports/soc2-compliance.json
          echo "‚úÖ SOC2 compliance validation completed"
      
      - name: ISO 27001 Compliance Check
        run: |
          python scripts/iso27001_compliance_check.py \
            --templates qa-templates/ \
            --output reports/iso27001-compliance.json
          echo "‚úÖ ISO 27001 compliance validation completed"
      
      - name: Generate compliance report
        run: |
          python scripts/generate_compliance_report.py \
            --input-dir reports/ \
            --output reports/compliance-summary.json
      
      - name: Upload compliance results
        uses: actions/upload-artifact@v4
        with:
          name: compliance-validation-results
          path: reports/compliance-*.json

  code-quality-analysis:
    name: Advanced Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Setup SonarQube Scanner
        uses: sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      
      - name: Install dependencies
        run: |
          npm ci
          pip install -r requirements.txt
      
      - name: Run comprehensive tests with coverage
        run: |
          npm run test:coverage
          python -m pytest tests/ --cov=. --cov-report=xml --cov-report=html
      
      - name: SonarQube Code Analysis
        run: |
          sonar-scanner \
            -Dsonar.projectKey=dartinbot-qa \
            -Dsonar.sources=. \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
            -Dsonar.python.coverage.reportPaths=coverage.xml
      
      - name: Code complexity analysis
        run: |
          npx complexity-report --output reports/complexity-report.json src/
          python scripts/python_complexity_analysis.py
      
      - name: Technical debt analysis
        run: |
          python scripts/technical_debt_analysis.py \
            --source-dir . \
            --output reports/technical-debt.json
      
      - name: Upload code quality results
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-results
          path: |
            reports/complexity-report.json
            reports/technical-debt.json
            coverage/

  performance-profiling:
    name: Performance Profiling and Baseline
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup performance testing environment
        run: |
          npm install -g lighthouse-ci artillery
          pip install locust memory-profiler
      
      - name: Start application for testing
        run: |
          npm run start:test &
          sleep 30  # Wait for application to start
      
      - name: Performance baseline testing
        run: |
          artillery run performance-tests/baseline-test.yml
          echo "‚úÖ Performance baseline testing completed"
      
      - name: Memory profiling
        run: |
          python -m memory_profiler scripts/memory_profile_test.py
          echo "‚úÖ Memory profiling completed"
      
      - name: Lighthouse performance audit
        run: |
          lhci autorun --upload.target=temporary-public-storage
          echo "‚úÖ Lighthouse performance audit completed"
      
      - name: Generate performance report
        run: |
          python scripts/generate_performance_report.py \
            --artillery-results performance-tests/results/ \
            --lighthouse-results .lighthouseci/ \
            --memory-results memory-profile.log \
            --output reports/performance-baseline.json
      
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-profiling-results
          path: |
            reports/performance-baseline.json
            performance-tests/results/
            .lighthouseci/

  qa-quality-gate:
    name: QA Quality Gate Evaluation
    runs-on: ubuntu-latest
    needs: [security-scanning, compliance-validation, code-quality-analysis, performance-profiling]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download all QA validation results
        uses: actions/download-artifact@v4
      
      - name: Evaluate QA quality gates
        run: |
          python scripts/evaluate_qa_quality_gates.py \
            --security-results security-scan-results/ \
            --compliance-results compliance-validation-results/ \
            --quality-results code-quality-results/ \
            --performance-results performance-profiling-results/ \
            --output reports/qa-gate-evaluation.json
      
      - name: Check quality gate status
        id: qa-gate-check
        run: |
          QA_GATE_STATUS=$(python scripts/check_qa_gate_status.py \
            --evaluation-file reports/qa-gate-evaluation.json)
          echo "qa_gate_status=$QA_GATE_STATUS" >> $GITHUB_OUTPUT
          
          if [ "$QA_GATE_STATUS" = "PASSED" ]; then
            echo "‚úÖ All QA quality gates passed"
          else
            echo "‚ùå QA quality gates failed"
            exit 1
          fi
      
      - name: Auto-promote to Testing
        if: steps.qa-gate-check.outputs.qa_gate_status == 'PASSED'
        run: |
          echo "üöÄ All QA quality gates passed"
          echo "‚è≠Ô∏è Initiating automatic promotion to Testing stage"
          
          # Clone Testing repository
          git clone https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository_owner }}/dartinbot-framework-testing.git testing-repo
          
          # Copy templates and metadata using production-ready promotion script
          python scripts/promote_to_testing.py \
            --source-dir ./qa-templates \
            --target-dir ./testing-repo/testing-templates \
            --qa-results ./reports/qa-gate-evaluation.json
          
          # Get QA scores for commit message
          SECURITY_SCORE=$(jq -r '.security.security_score' reports/qa-gate-evaluation.json)
          COMPLIANCE_RATE=$(jq -r '.compliance.compliance_pass_rate' reports/qa-gate-evaluation.json)
          QUALITY_SCORE=$(jq -r '.quality.quality_score' reports/qa-gate-evaluation.json)
          PERFORMANCE_SCORE=$(jq -r '.performance.performance_score' reports/qa-gate-evaluation.json)
          TEMPLATE_COUNT=$(find testing-repo/testing-templates/ -name '*.md' | wc -l)
          
          # Commit and push to Testing with enhanced metadata
          cd testing-repo
          git config user.name "DartinBot QA Pipeline"
          git config user.email "qa-pipeline@dartinbot.com"
          git add .
          
          # Create commit message with QA validation results
          cat > commit_message.txt << EOF
          üöÄ Auto-promote from QA [$(date)]
          
          ‚úÖ QA Validation Complete:
          - Security Score: ${SECURITY_SCORE}%
          - Compliance Rate: ${COMPLIANCE_RATE}%
          - Quality Score: ${QUALITY_SCORE}%
          - Performance Score: ${PERFORMANCE_SCORE}%
          
          üéØ Next Stage: Ultra-Strict Testing (99.9999% accuracy threshold)
          üìä Template Count: ${TEMPLATE_COUNT}
          üîí Security Certified: ‚úÖ
          üìã Compliance Validated: ‚úÖ
          EOF
          
          git commit -F commit_message.txt
          git push origin main
          
          echo "‚úÖ Successfully promoted to Testing stage with enhanced metadata"
      
      - name: Create QA promotion report
        if: always()
        run: |
          python scripts/create_qa_promotion_report.py \
            --qa-evaluation reports/qa-gate-evaluation.json \
            --target testing \
            --status ${{ steps.qa-gate-check.outputs.qa_gate_status }}
      
      - name: Upload QA promotion report
        uses: actions/upload-artifact@v4
        with:
          name: qa-promotion-report
          path: reports/qa-promotion-report.json

  security-certification:
    name: Generate Security Certification
    runs-on: ubuntu-latest
    needs: [qa-quality-gate]
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download security scan results
        uses: actions/download-artifact@v4
        with:
          name: security-scan-results
      
      - name: Generate security certificate
        run: |
          python scripts/generate_security_certificate.py \
            --scan-results . \
            --template-name ${{ github.event.inputs.template_name || 'auto-detected' }} \
            --output certificates/security-certificate.json
      
      - name: Sign security certificate
        run: |
          python scripts/sign_certificate.py \
            --certificate certificates/security-certificate.json \
            --private-key ${{ secrets.CERTIFICATE_PRIVATE_KEY }} \
            --output certificates/signed-security-certificate.json
      
      - name: Upload security certificate
        uses: actions/upload-artifact@v4
        with:
          name: security-certificate
          path: certificates/signed-security-certificate.json

  notify-qa-results:
    name: Notify QA Stage Results
    runs-on: ubuntu-latest
    needs: [qa-quality-gate, security-certification]
    if: always()
    steps:
      - name: Determine overall status
        id: overall-status
        run: |
          if [ "${{ needs.qa-quality-gate.result }}" = "success" ] && [ "${{ needs.security-certification.result }}" = "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=QA validation completed successfully" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=QA validation failed" >> $GITHUB_OUTPUT
          fi
      
      - name: Notify teams
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ steps.overall-status.outputs.status }}
          text: |
            QA stage validation completed for ${{ github.repository }}
            Stage: QA ‚Üí Testing
            Template: ${{ github.event.inputs.template_name || 'Multiple templates' }}
            Status: ${{ steps.overall-status.outputs.message }}
            Security Certified: ${{ needs.security-certification.result == 'success' && '‚úÖ' || '‚ùå' }}
            Compliance Validated: ‚úÖ
            Next Stage: Testing (Ultra-Strict Validation)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Update pipeline dashboard
        run: |
          curl -X POST ${{ secrets.DASHBOARD_WEBHOOK_URL }} \
            -H "Content-Type: application/json" \
            -d '{
              "stage": "qa",
              "status": "${{ steps.overall-status.outputs.status }}",
              "template": "${{ github.event.inputs.template_name || 'auto-detected' }}",
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
              "next_stage": "testing",
              "security_certified": ${{ needs.security-certification.result == 'success' }},
              "compliance_validated": true
            }'
